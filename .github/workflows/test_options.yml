name: Test options
on:
  push:
    branches:
      - main
  pull_request: null

jobs:
  test_enviroment_file_and_enviroment_name:
    name: Test options
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [windows-latest, ubuntu-latest, macos-latest]
        pytest: ["6.1", "6.2"]
    steps:
      - uses: actions/checkout@v2

      - name: install mamba
        uses: ./
        with:
          environment-file: false
          environment-name: nofile

      - name: install mamba
        uses: ./
        with:
          environment-file: environment.yml
          environment-name: myenv
          extra-specs: |
            pytest=${{ matrix.pytest }}
            python=3.8.8

      - name: run python in powershell
        shell: powershell
        run: |
          where micromamba
          micromamba info
          python -VV
          python -c "import numpy"
        if: runner.os == 'Windows'

      - name: run python in bash
        shell: bash -l {0}
        run: |
          which micromamba
          micromamba info
          python -VV
          python -c "import numpy"
        if: runner.os != 'Windows'

      - name: test environment name in powershell
        shell: powershell
        run: |
          python -c "import os; env = os.environ['CONDA_PREFIX'].split('\\')[-1]; assert env == 'myenv'"
        if: runner.os == 'Windows'

      - name: test environment name in bash
        shell: bash -l {0}
        run: |
          python -c "import os; env = os.environ['CONDA_PREFIX'].split('/')[-1]; assert env == 'myenv'"
        if: runner.os != 'Windows'

      - name: check python version in powershell
        shell: powershell
        run: |
          python --version
          python -c "import platform; assert platform.python_version() == '3.8.8'"
        if: runner.os == 'Windows'

      - name: check python version in bash
        shell: bash -l {0}
        run: |
          python --version
          python -c "import platform; assert platform.python_version() == '3.8.8'"
        if: runner.os != 'Windows'

      - name: check pytest version in powershell
        shell: powershell
        run: |
          pytest --version
          python -c "import pytest; assert pytest.__version__.startswith(str(${{ matrix.pytest }}))"
        if: runner.os == 'Windows'

      - name: check pytest version in bash
        shell: bash -l {0}
        run: |
          pytest --version
          python -c "import pytest; assert pytest.__version__.startswith(str(${{ matrix.pytest }}))"
        if: runner.os != 'Windows'

  test_channels:
    name: Test channels
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        environment-file: [false, environment.yml]
    steps:
      - uses: actions/checkout@v2

      - name: install mamba
        uses: ./
        with:
          environment-file: ${{ matrix.environment-file }}
          environment-name: test-channels
          extra-specs: |
            xtensor
          channels: conda-forge,blah

  test_environment_without_name:
    name: "Test environment.yml without name: attribute"
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
    steps:
      - uses: actions/checkout@v2

      - name: install mamba
        uses: ./
        with:
          environment-name: noname
          environment-file: .github/workflows/resources/environment_without_name.yml

      - run: micromamba list -n noname | grep -q xtensor
        shell: bash

  test_extra_specs:
    name: Test extra-specs
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [windows-latest, ubuntu-latest, macos-latest]

    defaults:
      run:
        shell: bash -l {0}

    steps:
      - uses: actions/checkout@v2

      - name: install mamba
        uses: ./
        with:
          environment-file: environment.yml
          environment-name: myenv
          extra-specs: |
            click
            sel(linux): xtensor
            sel(osx): cmake
            sel(win): ninja

      - name: list environment
        run: |
          micromamba list

      - name: check presence
        if: runner.os == 'linux'
        run: |
          if ! micromamba list | grep -q click; then exit 1; fi
          if ! micromamba list | grep -q xtensor; then exit 1; fi
          if micromamba list | grep -q cmake; then exit 1; fi
          if micromamba list | grep -q ninja; then exit 1; fi

      - name: check presence
        if: runner.os == 'macos'
        run: |
          if ! micromamba list | grep -q click; then exit 1; fi
          if micromamba list | grep -q xtensor; then exit 1; fi
          if ! micromamba list | grep -q cmake; then exit 1; fi
          if micromamba list | grep -q ninja; then exit 1; fi

      - name: check presence
        if: runner.os == 'windows'
        run: |
          if ! micromamba list | grep -q click; then exit 1; fi
          if micromamba list | grep -q xtensor; then exit 1; fi
          if micromamba list | grep -q cmake; then exit 1; fi
          if ! micromamba list | grep -q ninja; then exit 1; fi
